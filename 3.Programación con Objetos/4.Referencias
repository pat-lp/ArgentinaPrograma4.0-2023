Ejercicio 1: Variables
Veamos si queda claro: agregá al programa anterior una variable saludo_formal, inicializada con "buen día".

Resolución: 
saludo = "hola"
saludo_formal= "buen día"
saludo.upcase

Ejercicio 2: Las variables son referencias
Veamos si se entiende hasta acá: creá una variable llamada despedida que apunte al objeto "adiós", 
y luego enviale el mensaje size().

Resolución: 
despedida = "adiós"
despedida.size()

Ejercicio 3: Referencias implícitas
Probá las siguientes consultas en la consola y pensá en dónde hay referencias implícitas:

Resolución: 
> "ni hao".upcase
> 4.abs.even?
> (4 + 8).abs
 
Ejercicio 4: Múltiples referencias
Declará las variables otro_saludo y despedida como en el ejemplo de más arriba, y realizá las siguientes consultas utilizando equal?:

> "buen día".equal? "buen día"
> despedida.equal? "buen día"
> otro_saludo.equal? otro_saludo
> despedida.equal? otro_saludo
¡Ahora sacá tus conclusiones viendo que responde en cada caso!
 
Ejercicio 5: Identidad, revisada
Si tuvieramos el siguiente código...

persona = "Graciela"
hija_de_hector = "Graciela"
hermana_de_tito = persona
hija_de_elena = "Gracielita"
hermana_de_ana = hermana_de_tito
mama_de_gustavo = "hermana_de_ana"
tia_de_gonzalo = hija_de_hector
... podríamos decir que solo hermana_de_tito y hermana_de_ana referencian al mismo objeto que persona.


Ejercicio 6: Equivalencia
El mensaje == nos permite comparar dos objetos por equivalencia; lo cual se da típicamente cuando los objetos tienen el mismo estado. 
Y como vemos, puede devolver true, aún cuando los dos objetos no sean el mismo.

Por ejemplo, en este caso...
procer = "San Martín"
avenida = "San Martín"
ciudad = "San Martín"
... las 3 referencias distintas apuntan a objetos equivalentes entre sí, pero no idénticos.

Ejercicio 7: Objetos bien conocidos
¿Y qué hay de los objetos que veníamos definiendo hasta ahora? Por ejemplo a Fito, le aumenta la felicidad cuando come:

module Fito
  @felicidad = 100

  def self.comer!(calorias)
     @felicidad += calorias * 0.001
  end

  def self.felicidad
    @felicidad
  end
end
Veamos si va quedando claro. Definí un objeto AbuelaClotilde que entienda un mensaje alimentar_nieto!, que haga comer! 
2 veces a Fito: primero con 2000 calorias, y luego con 1000 calorías; ¡el postre no podía faltar! .

Resolución:
#Ya declaramos a Fito por vos.
#¡Desarrollá a la AbuelaClotilde acá!
module AbuelaClotilde  
  def self.alimentar_nieto!
    Fito.comer!(2000)
    Fito.comer!(1000)
  end
end

Ejercicio 8: Atributos y parámetros
Si la golondrina Pepita conoce siempre su ciudad actual...

module Pepita
  @energia = 100

  def self.volar_en_circulos!
    @energia -= 10
  end

  def self.ciudad=(una_ciudad)
      @ciudad = una_ciudad
  end

  def self.ciudad
    @ciudad
  end
end
Escribí un programa que defina la ciudad de Pepita de forma que apunte a Iruya. Y pensá: ¿cuántas referencias a Iruya hay en este programa?

Resolución: 
Pepita.ciudad = Iruya


Ejercicio 9: Lo 100to
En este código...

module Pepita
  @energia = 100

  def self.volar_en_circulos!
    @energia -= 10
  end

  def self.ciudad=(una_ciudad)
    @ciudad = una_ciudad
  end
end

module Iruya
end
...si bien:

Pepita e Iruya son objetos bien conocidos;
@energiay @ciudad son atributos;
y una_ciudad es un parámetro;
¡Todas son referencias!


Ejercicio 10: Objetos compartidos
Cuando Juli es feliz Fito es feliz:

module Fito
  def self.amigo=(un_amigo)
    @amigo = un_amigo
  end

  def self.es_feliz_como_su_amigo?
    @amigo.felicidad > 105
  end
end
Creá un programa que inicialice al amigo de Fito y al nieto de AbueloGervasio de forma que ambos conozcan al mismo objeto (Juli).
Luego, hacé que el abuelo alimente a su nieto 3 veces. ¿Qué pasará con Fito? ¿Se pondrá feliz?

Resolución:
#Juli, Fito y AbueloGervasio ya están declarados.
#Inicializalos y enviales mensajes acá...
Fito.amigo = Juli
AbueloGervasio.nieto = Juli
nieto = Juli

3.times{AbueloGervasio.alimentar_nieto!}

def self.es_feliz_como_su_amigo?
@felicidad=true
end

Ejercicio 11: Para cerrar
Cada vez que Jor picantea el plato del día le agrega 5 ajíes.
¡Hoy hay Fideos! Decimos que los Fideos están picantes si el plato tiene más de 2 ajíes. Inicialmente no tiene ajíes.
Cuando descartamos la salsa de los Fideos dejan de tener ajíes.
Luchi necesita saber qué plato suavizar y cuántos ajíes sacarle para hacerlo. Si el plato tiene más de 10 ajíes, 
directamente descarta la salsa para poder usarla en otra comida.
Definí los objetos necesarios para que podamos hacer lo siguiente:

#Configurar el plato del día de Jor
Jor.plato_del_dia = Fideos
#Que Jor le agregue picante
Jor.picantear!
#Preguntar si está picante
Fideos.picantes?
#Que Luchi suavice el plato que reciba como argumento
Luchi.suavizar! Fideos, 3
#Descartar la salsa
Fideos.descartar_la_salsa!

Resolución: 
module Fideos
@ajies=0  

def self.ajies
    @ajies
end
  
def self.picantes?
    @ajies > 2
end

def self.descartar_la_salsa!
  @ajies = 0
end

def self.agregar_picante!
  @ajies = @ajies +1
end

def self.quitar_picante!
  @ajies = @ajies -1
end
end

module Jor
def self.plato_del_dia=(plato)
@plato_del_dia=plato
end
 
def self.picantear!
5.times {@plato_del_dia.agregar_picante!} 
end
end  
  
module Luchi
def self.suavizar!(plato, cant)
if (plato.ajies>10) 
plato.descartar_la_salsa!
elsif (plato.ajies>2)
cant.times {plato.quitar_picante!} 
end
end
end
